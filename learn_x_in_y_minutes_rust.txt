What should you know about rust?|"Rust is a programming language developed by Mozilla Research.
Rust combines low-level control over performance with high-level convenience and
safety guarantees.
"
How does rust achieve its goals?|"It achieves these goals without requiring a garbage collector or runtime, making
it possible to use Rust libraries as a ""drop-in replacement"" for C.
"
What should you know about the 0.1 release of rust?|"Rust’s first release, 0.1, occurred in January 2012, and for 3 years development
moved so quickly that until recently the use of stable releases was discouraged
and instead the general advice was to use nightly builds.
"
What should you know about the 1.0 release of rust?|"On May 15th 2015, Rust 1.0 was released with a complete guarantee of backward
compatibility. Improvements to compile times and other aspects of the compiler are
currently available in the nightly builds. Rust has adopted a train-based release
model with regular releases every six weeks. Rust 1.1 beta was made available at
the same time of the release of Rust 1.0.
"
What should you know about rust with respect to functional concepts?|"Although Rust is a relatively low-level language, it has some functional
concepts that are generally found in higher-level languages. This makes
Rust not only fast, but also easy and efficient to code in.
"
What do comments look like in rust?"|"<pre align=""left"">
// This is a comment. Line comments look like this...
// and extend multiple lines like this.

/* Block comments
  /* can be nested. */ */
</pre>
"
Can block comments be nested in rust?|Yes

What do documentation comments look like in rust?|"<pre align=""left"">
/// Documentation comments look like this and support markdown notation.
/// # Examples
///
/// ```
/// let five = 5
/// ```
</pre>
"
What do documentation comments support markdown notation?|Yes
How do you do functions in rust?|"<pre align=""left"">
#[allow(dead_code)]
fn add2(x: i32, y: i32) -> i32 {
    // Implicit return (no semicolon)
    x + y
}
</pre>
"
What does i32 mean in rust?|<code>i32</code> is the type for 32-bit signed integers
How do you do a main function in rust?|"<pre align=""left"">
#[allow(unused_variables)]
#[allow(unused_assignments)]
#[allow(dead_code)]
fn main() {

}
</pre>
"
How do you do Immutable bindings in rust?|"<pre align=""left"">
let x: i32 = 1;
</pre>
"
How do you do Integer/float suffixes in rust?|"<pre align=""left"">
let y: i32 = 13i32;
let f: f64 = 1.3f64;
</pre>
"
What should you know about type inferences in rust?|Most of the time, the Rust compiler can infer what type a variable is, so you don’t have to write an explicit type annotation. Throughout this tutorial, types are explicitly annotated in many places, but only for demonstrative purposes. Type inference can handle this for you most of the time.
What is an example of type inferences in rust?|"<pre align=""left"">
let implicit_x = 1;
let implicit_f = 1.3;
</pre>
"
How do you do arithmetic in rust?|"<pre align=""left"">
let sum = x + y + 13;
</pre>
"
How do you do mutable variables in rust?|"<pre align=""left"">
let mut mutable = 1;
mutable = 4;
mutable += 2;
</pre>
"
How do you do string literals in rust?|"<pre align=""left"">
let x: &str = ""hello world!"";
</pre>
"
How do you do printing in rust?|"<pre align=""left"">
println!(""{} {}"", f, x); // 1.3 hello world
</pre>
"
"What is a <code>String</code> in rust?"|"A `String` – a heap-allocated string. Stored as a <code>Vec<u8></code> and always holds a valid UTF-8 sequence, which is not null terminated."
What is an example of a <code>String</code> in rust?|"<pre align=""left"">
let s: String = ""hello world"".to_string();
</pre>
"
What is a string slice in rust?"|"A string slice – an immutable view into another string. This is basically an immutable pointer and length of a string – it doesn’t actually contain the contents of a string, just a pointer to the beginning and a length of a string buffer, statically allocated or contained in another object (in this case, <code>s</code>). The string slice is like a view <code>&[u8]</code> into <code>Vec &lt;T&gt;</code>."
What is an example of a string slice in rust?|"<pre align=""left"">
let s_slice: &str = &s;
println!(""{} {}"", s, s_slice); // hello world hello world
</pre>
"
How do you do fixed-size arrays in rust?|"
<code>let four_ints: [i32; 4] = [1, 2, 3, 4];</code>
"
How do you do dynamic arrays (vector) in rust?|"<pre align=""left"">
let mut vector: Vec&lt;i32&gt; = vec![1, 2, 3, 4];
vector.push(5);
</pre>

"
What is a vector/array slice in rust?|An immutable view into a vector or array. This is much like a string slice, but for vectors.
How do you do a vector/array slice in rust?|<code>let slice: &[i32] = &vector;</code>
How do you use <code>{:?}</code> to print something debug-style in rust?|"<code>println!(""{:?} {:?}"", vector, slice); // [1, 2, 3, 4, 5] [1, 2, 3, 4, 5]</code>"
What is a tuple in rust?|A fixed-size set of values of possibly different types.
How do you do tuples in rust?|"<code>let x: (i32, &str, f64) = (1, ""hello"", 3.4);</code>"
How do you do use destructuring <code>let</code> in rust?|"<pre align=""left"">
let (a, b, c) = x;
println!(""{} {} {}"", a, b, c); // 1 hello 3.4
</pre>
"
How do you index a tuple in rust?|"<code>println!(""{}"", x.1); // hello</code>"
How do you do <code>Struct</code> types in rust?|"<pre align=""left"">
// Struct
struct Point {
    x: i32,
    y: i32,
}

let origin: Point = Point { x: 0, y: 0 };
</pre>
"
What is a <code>tuple struct</code> in rust?|A struct with unnamed fields
How do you do tuple structs in rust?|"<pre align=""left"">
struct Point2(i32, i32);
let origin2 = Point2(0, 0);
</pre>
"
How do you do basic C-like enums in rust?|"<pre align=""left"">
enum Direction {
    Left,
    Right,
    Up,
    Down,
}

let up = Direction::Up;
</pre>
"
How do you do enums with fields in rust?|"<pre align=""left"">
enum OptionalI32 {
    AnI32(i32),
    Nothing,
}

let two: OptionalI32 = OptionalI32::AnI32(2);
let nothing = OptionalI32::Nothing;
</pre>
"
If you want to make something optional in a type in rust what can you use?|If you want to make something optional, the standard library has <code>Option</code>
How are Generics defined in rust?|This is defined in the standard library as <code>Option</code>. <code>Option</code> is used in place of where a null pointer would normally be used.
How do you do Generics in rust?|"<pre align=""left"">
struct Foo&lt;T&gt; { bar: T }
enum Optional&lt;T&gt; {
    SomeVal(T),
    NoVal,
}
</pre>
"
What do Methods take in rust?|Methods take an explicit <code>self</code> parameter
How do you do Methods in rust?|"<pre align=""left"">
impl&lt;T&gt; Foo&lt;T&gt; {
    // M
    fn bar(&self) -> &T { // self is borrowed
        &self.bar
    }
    fn bar_mut(&mut self) -> &mut T { // self is mutably borrowed
        &mut self.bar
    }
    fn into_bar(self) -> T { // here self is consumed
        self.bar
    }
}

let a_foo = Foo { bar: 1 };
println!(""{}"", a_foo.bar()); // 1
</pre>
"
What are Traits in rust known as in other languages?|Interfaces or typeclasses
How do you do traits in rust?|"<pre align=""left"">
trait Frobnicate&lt;T&gt; {
    fn frobnicate(self) -> Option&lt;T&gt;;
}

impl&lt;T&gt; Frobnicate&lt;T&gt; for Foo&lt;T&gt; {
    fn frobnicate(self) -> Option&lt;T&gt; {
        Some(self.bar)
    }
}

let another_foo = Foo { bar: 1 };
println!(""{:?}"", another_foo.frobnicate()); // Some(1)
</pre>
"
How do you do function pointer types in rust?|"<pre align=""left"">
fn fibonacci(n: u32) -> u32 {
    match n {
        0 => 1,
        1 => 1,
        _ => fibonacci(n - 1) + fibonacci(n - 2),
    }
}

type FunctionPointer = fn(u32) -> u32;

let fib : FunctionPointer = fibonacci;
println!(""Fib: {}"", fib(4)); // 5
</pre>
"
How do you do basic pattern matching in rust?|"<pre align=""left"">
let foo = OptionalI32::AnI32(1);
match foo {
    OptionalI32::AnI32(n) => println!(""it’s an i32: {}"", n),
    OptionalI32::Nothing  => println!(""it’s nothing!""),
}
</pre>
"
How do you do advanced pattern matching in rust?|"<pre align=""left"">
struct FooBar { x: i32, y: OptionalI32 }
let bar = FooBar { x: 15, y: OptionalI32::AnI32(32) };

match bar {
    FooBar { x: 0, y: OptionalI32::AnI32(0) } =>
        println!(""The numbers are zero!""),
    FooBar { x: n, y: OptionalI32::AnI32(m) } if n == m =>
        println!(""The numbers are the same""),
    FooBar { x: n, y: OptionalI32::AnI32(m) } =>
        println!(""Different numbers: {} {}"", n, m),
    FooBar { x: _, y: OptionalI32::Nothing } =>
        println!(""The second number is Nothing!""),
}
</pre>
"
How do you do for loops/iteration with arrays in rust?|"<pre align=""left"">
let array = [1, 2, 3];
for i in array {
    println!(""{}"", i);
}
</pre>
"
How do you do for loops/iteration with ranges in rust?|"<pre align=""left"">
for i in 0u32..10 {
    print!(""{} "", i);
}
println!("""");
// prints `0 1 2 3 4 5 6 7 8 9 `
</pre>
"
How do you do if statments in rust?|"<pre align=""left"">
if 1 == 1 {
    println!(""Maths is working!"");
} else {
    println!(""Oh no..."");
}
</pre>
"
How do you do if statments as an expression in rust?|"<pre align=""left"">
let value = if true {
    ""good""
} else {
    ""bad""
};
</pre>
"
How do you do while loops in rust?|"<pre align=""left"">
while 1 == 1 {
    println!(""The universe is operating normally."");
    // break statement gets out of the while loop.
    //  It avoids useless iterations.
    break
}
</pre>
"
How do you do infinite loops in rust?|"<pre align=""left"">
loop {
    println!(""Hello!"");
    // break statement gets out of the loop
    break
}
</pre>
"
What should you know about Owned pointers in rust?|"Owned pointer – only one thing can ‘own’ this pointer at a time. This means that when the <code>Box</code> leaves its scope, it will be automatically deallocated safely.
<pre align=""left"">
let mut mine: Box<i32> = Box::new(3);
*mine = 5; // dereference
// Here, `now_its_mine` takes ownership of `mine`. In other words, `mine` is moved.
let mut now_its_mine = mine;
*now_its_mine += 2;

println!(""{}"", now_its_mine); // 7
// println!(""{}"", mine); // this would not compile because `now_its_mine` now owns the pointer
</pre>
"
What should you know about References in rust?|"Reference – an immutable pointer that refers to other data. When a reference is taken to a value, we say that the value has been ‘borrowed’. While a value is borrowed immutably, it cannot be mutated or moved. A borrow is active until the last use of the borrowing variable.
<pre align=""left"">
let mut var = 4;
var = 3;
let ref_var: &i32 = &var;

println!(""{}"", var); // Unlike `mine`, `var` can still be used
println!(""{}"", *ref_var);
// var = 5; // this would not compile because `var` is borrowed
// *ref_var = 6; // this would not either, because `ref_var` is an immutable reference
ref_var; // no-op, but counts as a use and keeps the borrow active
var = 2; // ref_var is no longer used after the line above, so the borrow has ended
</pre>
"
What should you know about Mutable References in rust?|"While a value is mutably borrowed, it cannot be accessed at all.
<pre align=""left"">
let mut var2 = 4;
let ref_var2: &mut i32 = &mut var2;
*ref_var2 += 2;         // '*' is used to point to the mutably borrowed var2

println!(""{}"", *ref_var2); // 6 , // var2 would not compile.
// ref_var2 is of type &mut i32, so stores a reference to an i32, not the value.
// var2 = 2; // this would not compile because `var2` is borrowed.
ref_var2; // no-op, but counts as a use and keeps the borrow active until here
</pre>
"
What is some further reading for rust?|"
<p>For a deeper-yet-still-fast explanation into Rust and its symbols/keywords, the
<a href=""https://fasterthanli.me/articles/a-half-hour-to-learn-rust"">half-hour to learn Rust</a>
article by Fasterthanlime explains (almost) everything in a clear and concise way!</p>

<p>There’s a lot more to Rust—this is just the basics of Rust so you can understand
the most important things. To learn more about Rust, read <a href=""http://doc.rust-lang.org/book/index.html"">The Rust Programming
Language</a> and check out the
<a href=""http://reddit.com/r/rust"">/r/rust</a> subreddit. The folks on the #rust channel on
irc.mozilla.org are also always keen to help newcomers.</p>

<p>You can also try out features of Rust with an online compiler at the official
<a href=""https://play.rust-lang.org"">Rust Playground</a> or on the main
<a href=""http://rust-lang.org"">Rust website</a>.</p>"